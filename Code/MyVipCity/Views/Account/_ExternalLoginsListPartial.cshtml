@model MyVipCity.Models.ExternalLoginListViewModel
@using Microsoft.Owin.Security
@{
    var anchorClassDictionary = new Dictionary<string, string> {
        { "google", "mdc-bg-red-400"},
        { "facebook", "mdc-bg-blue-500"},
        { "twitter", "mdc-bg-cyan-500"}
    };
    // generate a unique id for the external login form
    var guid = Guid.NewGuid().ToString("N");
    var externalLoginFormId = "form_" + guid;
    var providerHiddenInputId = "hidden_" + guid;
    // get the external login providers
    var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
    // check if there are indeed external login providers configured
    if (loginProviders.Count() > 0) {
        using (Html.BeginForm("ExternalLogin", "Account", new { ReturnUrl = Model.ReturnUrl }, FormMethod.Post, new { id = externalLoginFormId })) {
            @Html.AntiForgeryToken()
            <div class="top-nav__auth">
                <span>or</span>
                <div>Sign in using</div>
                @foreach (AuthenticationDescription p in loginProviders.OrderBy(x => x.AuthenticationType)) {
                    if (anchorClassDictionary.ContainsKey(p.AuthenticationType.ToLower())) {
                        <a href="javascript:document.getElementById('@providerHiddenInputId').value='@p.AuthenticationType';document.getElementById('@externalLoginFormId').submit()" class="@anchorClassDictionary[p.AuthenticationType.ToLower()]">
                            <i class="zmdi zmdi-@p.AuthenticationType.ToLower()"></i>
                        </a>
                    }
                }
                <input type="hidden" name="provider" id="@providerHiddenInputId" />
            </div>
        }
    }
}

